{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Evan/Desktop/SDM/project/frontend/src/Containers/Menu.js\",\n    _s = $RefreshSig$();\n\nimport AnimateButton from \"../Components/AnimateButton\";\nimport { useState, useEffect } from \"react\";\nimport Tab from \"../Components/Tab\";\nimport Dish from \"../Components/Dish\";\nimport { Divider } from \"@mui/material\";\nimport shuffle from \"../Functions/Shuffle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Menu = _ref => {\n  _s();\n\n  let {\n    dishes,\n    cart,\n    setCart\n  } = _ref;\n  const [dishType, setDishType] = useState(\"\");\n  const [allTypeName, setAllTypeName] = useState([]);\n  const [allTypeImage, setAllTypeImage] = useState([]);\n  useEffect(() => {\n    console.log(cart[dishes[0].name]);\n    shuffle(dishes); // because the state variable wouldn't render immediately\n\n    let typeTemp = [];\n\n    for (let i = 0; i < dishes.length; i++) {\n      if (!typeTemp.includes(dishes[i].type)) {\n        // setAllTypeName(all => [...all, dishes[i].type])\n        typeTemp.push(dishes[i].type);\n        setAllTypeImage(all => [...all, dishes[i].image]);\n      }\n    }\n\n    setAllTypeName(typeTemp);\n  }, []);\n\n  const onClick_dishType = (e, type) => {\n    setDishType(type);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: dishType === \"\" ? allTypeName.map((type, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-object\",\n      onClick: e => onClick_dishType(e, type),\n      children: /*#__PURE__*/_jsxDEV(AnimateButton, {\n        imageUrl: allTypeImage[index],\n        imageTitle: type,\n        imageWidth: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 93\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        items: allTypeName,\n        dishType: dishType,\n        setDishType: setDishType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-object\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(AnimateButton, {\n          imageUrl: allTypeImage[allTypeName.indexOf(dishType)],\n          imageTitle: dishType,\n          imageWidth: \"100%\",\n          clickAble: \"false\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 4\n      }, this), dishes.map(dish => dish.type === dishType ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-auto inline-block p-3\",\n        children: /*#__PURE__*/_jsxDEV(Dish, {\n          dish: dish,\n          cart: cart,\n          setCart: setCart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false))]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Menu, \"e4fs3g0U0JEucVueXiaWWwsKGtQ=\");\n\n_c = Menu;\nexport default Menu;\n\nvar _c;\n\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"sources":["/mnt/c/Users/Evan/Desktop/SDM/project/frontend/src/Containers/Menu.js"],"names":["AnimateButton","useState","useEffect","Tab","Dish","Divider","shuffle","Menu","dishes","cart","setCart","dishType","setDishType","allTypeName","setAllTypeName","allTypeImage","setAllTypeImage","console","log","name","typeTemp","i","length","includes","type","push","all","image","onClick_dishType","e","map","index","indexOf","dish"],"mappings":"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","sourcesContent":["import AnimateButton from \"../Components/AnimateButton\";\r\nimport { useState, useEffect} from \"react\";\r\nimport Tab from \"../Components/Tab\"\r\nimport Dish from \"../Components/Dish\"\r\nimport { Divider } from \"@mui/material\";\r\nimport shuffle from \"../Functions/Shuffle\";\r\n\r\n\r\n\r\nconst Menu = ({dishes,cart, setCart}) =>{\r\n\r\n\tconst [dishType, setDishType] = useState(\"\")\r\n\tconst [allTypeName, setAllTypeName] = useState([])\r\n\tconst [allTypeImage, setAllTypeImage] = useState([])\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(cart[dishes[0].name])\r\n\t\tshuffle(dishes)\r\n\t\t// because the state variable wouldn't render immediately\r\n\t\tlet typeTemp = []\r\n\t\tfor (let i = 0; i < dishes.length; i++){\r\n\t\t\tif(!typeTemp.includes(dishes[i].type)){\r\n\t\t\t\t// setAllTypeName(all => [...all, dishes[i].type])\r\n\t\t\t\ttypeTemp.push(dishes[i].type)\r\n\t\t\t\tsetAllTypeImage(all => [...all, dishes[i].image])\r\n\t\t\t}\r\n\t\t}\t\r\n\t\tsetAllTypeName(typeTemp)\t\r\n\t}, []);\r\n\r\n\r\n\tconst onClick_dishType = (e, type) => {\r\n\t\tsetDishType(type)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t{\r\n\t\tdishType === \"\"\r\n\t\t?\r\n\t\tallTypeName.map(\r\n\t\t\t(type, index)=><div className={\"button-object\"} onClick={e => onClick_dishType(e, type)}><AnimateButton imageUrl={allTypeImage[index]} imageTitle={type} imageWidth={\"100%\"}></AnimateButton></div>) \r\n\t\t:\r\n\t\t<>\r\n\t\t\t<Tab items={allTypeName} dishType={dishType} setDishType={setDishType}></Tab>\r\n\t\t\t<Divider></Divider>\r\n\t\t\t{/* {dishes.map(\r\n\t\t\t\t(dish)=>  dish.type === dishType\r\n\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t<div className={\"button-object\"}><AnimateButton imageUrl={dish.image} imageTitle={dish.name} imageWidth={\"100%\"}></AnimateButton></div>\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t<></>)} */}\r\n\r\n\t\t\t<div className={\"button-object\"}> <AnimateButton imageUrl={allTypeImage[allTypeName.indexOf(dishType)]} imageTitle={dishType} imageWidth={\"100%\"} clickAble=\"false\"></AnimateButton></div>\r\n\t\t\t<br/>\r\n\t\t\t{dishes.map(\r\n\t\t\t\t(dish) => dish.type === dishType\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<div className={\"my-auto inline-block p-3\"}><Dish dish={dish} cart={cart} setCart={setCart}></Dish></div>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<></>\r\n\t\t\t)}\t\t\t\r\n\t\t</>\r\n\t\t}\r\n\t\t</div>\r\n\t)\t\r\n}\r\n\r\nexport default Menu;"]},"metadata":{},"sourceType":"module"}