{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Evan/Desktop/SDM/project/frontend/src/Containers/Menu.js\",\n    _s = $RefreshSig$();\n\nimport AnimateButton from \"../Components/AnimateButton\";\nimport { useState, useEffect } from \"react\";\nimport Tab from \"../Components/Tab\";\nimport Dish from \"../Components/Dish\";\nimport { Divider } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Menu = _ref => {\n  _s();\n\n  let {\n    dishes\n  } = _ref;\n  const [dishType, setDishType] = useState(\"\");\n  const [allTypeName, setAllTypeName] = useState([]);\n  const [allTypeImage, setAllTypeImage] = useState([]);\n  useEffect(() => {\n    // because the state variable wouldn't render immediately\n    let typeTemp = [];\n\n    for (let i = 0; i < dishes.length; i++) {\n      console.log(dishes[i]);\n      console.log(allTypeName.includes(dishes[i].type));\n\n      if (!typeTemp.includes(dishes[i].type)) {\n        // setAllTypeName(all => [...all, dishes[i].type])\n        typeTemp.push(dishes[i].type);\n        setAllTypeImage(all => [...all, dishes[i].image]);\n      }\n    }\n\n    setAllTypeName(typeTemp);\n  }, []);\n  useEffect(() => {\n    console.log(dishType);\n  }, [dishType]);\n\n  const onClick_dishType = (e, type) => {\n    console.log(type);\n    setDishType(type);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: dishType === \"\" ? allTypeName.map((type, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-object\",\n      onClick: e => onClick_dishType(e, type),\n      children: /*#__PURE__*/_jsxDEV(AnimateButton, {\n        imageUrl: allTypeImage[index],\n        imageTitle: type,\n        imageWidth: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 93\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        items: allTypeName,\n        dishType: dishType,\n        setDishType: setDishType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 4\n      }, this), dishes.map(dish => dish.type === dishType ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-object\",\n        children: /*#__PURE__*/_jsxDEV(AnimateButton, {\n          imageUrl: dish.image,\n          imageTitle: dish.name,\n          imageWidth: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 8\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)), dishes.map(dish => dish.type === dishType ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-auto inline-block p-3\",\n        children: /*#__PURE__*/_jsxDEV(Dish, {\n          dish: dish\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false))]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Menu, \"QqJqCGiifhrdDmvVucmpm0yMveE=\");\n\n_c = Menu;\nexport default Menu;\n\nvar _c;\n\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"sources":["/mnt/c/Users/Evan/Desktop/SDM/project/frontend/src/Containers/Menu.js"],"names":["AnimateButton","useState","useEffect","Tab","Dish","Divider","Menu","dishes","dishType","setDishType","allTypeName","setAllTypeName","allTypeImage","setAllTypeImage","typeTemp","i","length","console","log","includes","type","push","all","image","onClick_dishType","e","map","index","dish","name"],"mappings":"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","sourcesContent":["import AnimateButton from \"../Components/AnimateButton\";\r\nimport { useState, useEffect} from \"react\";\r\nimport Tab from \"../Components/Tab\"\r\nimport Dish from \"../Components/Dish\"\r\nimport { Divider } from \"@mui/material\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Menu = ({dishes}) =>{\r\n\r\n\tconst [dishType, setDishType] = useState(\"\")\r\n\tconst [allTypeName, setAllTypeName] = useState([])\r\n\tconst [allTypeImage, setAllTypeImage] = useState([])\r\n\r\n\tuseEffect(() => {\r\n\t\t// because the state variable wouldn't render immediately\r\n\t\tlet typeTemp = []\r\n\t\tfor (let i = 0; i < dishes.length; i++){\r\n\t\t\tconsole.log(dishes[i])\r\n\t\t\tconsole.log(allTypeName.includes(dishes[i].type))\r\n\t\t\tif(!typeTemp.includes(dishes[i].type)){\r\n\t\t\t\t// setAllTypeName(all => [...all, dishes[i].type])\r\n\t\t\t\ttypeTemp.push(dishes[i].type)\r\n\t\t\t\tsetAllTypeImage(all => [...all, dishes[i].image])\r\n\t\t\t}\r\n\t\t}\t\r\n\t\tsetAllTypeName(typeTemp)\t\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(dishType)\r\n\t}, [dishType]);\r\n\r\n\tconst onClick_dishType = (e, type) => {\r\n\t\tconsole.log(type)\r\n\t\tsetDishType(type)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t{\r\n\t\tdishType === \"\"\r\n\t\t?\r\n\t\tallTypeName.map(\r\n\t\t\t(type, index)=><div className={\"button-object\"} onClick={e => onClick_dishType(e, type)}><AnimateButton imageUrl={allTypeImage[index]} imageTitle={type} imageWidth={\"100%\"}></AnimateButton></div>) \r\n\t\t:\r\n\t\t<>\r\n\t\t\t<Tab items={allTypeName} dishType={dishType} setDishType={setDishType}></Tab>\r\n\t\t\t<Divider></Divider>\r\n\t\t\t{dishes.map(\r\n\t\t\t\t(dish)=>  dish.type === dishType\r\n\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t<div className={\"button-object\"}><AnimateButton imageUrl={dish.image} imageTitle={dish.name} imageWidth={\"100%\"}></AnimateButton></div>\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t<></>)}\r\n\t\t\t{dishes.map(\r\n\t\t\t\t(dish) => dish.type === dishType\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<div className={\"my-auto inline-block p-3\"}><Dish dish={dish}></Dish></div>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<></>\r\n\t\t\t)}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t</>\r\n\t\t}\r\n\t\t</div>\r\n\t)\t\r\n}\r\n\r\nexport default Menu;"]},"metadata":{},"sourceType":"module"}